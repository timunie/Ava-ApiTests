"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["704515"],{534219:function(e,r,t){t.r(r),t.d(r,{default:()=>h,frontMatter:()=>c,metadata:()=>s,assets:()=>d,toc:()=>l,contentTitle:()=>o});var s=JSON.parse('{"id":"Methods_T_Avalonia_Vector","title":"Vector Methods","description":"Methods","source":"@site/docs/Methods_T_Avalonia_Vector.md","sourceDirName":".","slug":"/Methods_T_Avalonia_Vector","permalink":"/Ava-ApiTests/docs/Methods_T_Avalonia_Vector","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/Methods_T_Avalonia_Vector.md","tags":[],"version":"current","frontMatter":{}}'),n=t("785893"),i=t("250065");let c={},o="Vector Methods",d={},l=[{value:"Methods",id:"methods",level:2},{value:"Extension Methods",id:"extension-methods",level:2},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function a(e){let r={br:"br",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"vector-methods",children:"Vector Methods"})}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Abs",children:"Abs()"})}),(0,n.jsx)("td",{children:"Returns a vector whose elements are the absolute values of each of the specified vector's elements."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Add",children:"Add(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Adds the second to the first vector"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Clamp",children:"Clamp(Vector, Vector, Vector)"})}),(0,n.jsx)("td",{children:"Restricts a vector between a minimum and a maximum value."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Cross",children:"Cross(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Returns the cross product of two vectors."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Deconstruct",children:"Deconstruct(Double, Double)"})}),(0,n.jsx)("td",{children:"Deconstructs the vector into its X and Y components."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Distance",children:"Distance(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Computes the Euclidean distance between the two given points."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_DistanceSquared",children:"DistanceSquared(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Returns the Euclidean distance squared between two specified points"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Divide",children:"Divide(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Divides the first vector by the second."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Divide_1",children:"Divide(Vector, Double)"})}),(0,n.jsx)("td",{children:"Divides the vector by the given scalar."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Dot",children:"Dot(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Returns the dot product of two vectors."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Equals_1",children:"Equals(Object)"})}),(0,n.jsxs)("td",{children:[(0,n.jsx)("br",{}),"(Overrides ",(0,n.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype.equals",target:"_blank",rel:"noopener noreferrer",children:"ValueType.Equals(Object)"}),")"]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Equals",children:"Equals(Vector)"})}),(0,n.jsx)("td",{children:"Check if two vectors are equal (bitwise)."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_GetHashCode",children:"GetHashCode()"})}),(0,n.jsxs)("td",{children:[(0,n.jsx)("br",{}),"(Overrides ",(0,n.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode",target:"_blank",rel:"noopener noreferrer",children:"ValueType.GetHashCode()"}),")"]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.object.gettype",target:"_blank",rel:"noopener noreferrer",children:"GetType()"})}),(0,n.jsxs)("td",{children:["Gets the ",(0,n.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.type",target:"_blank",rel:"noopener noreferrer",children:"Type"})," of the current instance.",(0,n.jsx)("br",{}),"(Inherited from ",(0,n.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.object",target:"_blank",rel:"noopener noreferrer",children:"Object"}),")"]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Max",children:"Max(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Min",children:"Min(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Multiply",children:"Multiply(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Multiplies the first vector by the second."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Multiply_1",children:"Multiply(Vector, Double)"})}),(0,n.jsx)("td",{children:"Multiplies the vector by the given scalar."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_NearlyEquals",children:"NearlyEquals(Vector)"})}),(0,n.jsx)("td",{children:"Check if two vectors are nearly equal (numerically)."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Negate",children:"Negate()"})}),(0,n.jsx)("td",{children:"Returns a negated version of this vector."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Negate_1",children:"Negate(Vector)"})}),(0,n.jsx)("td",{children:"Negates the vector"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Normalize",children:"Normalize()"})}),(0,n.jsx)("td",{children:"Returns a normalized version of this vector."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Normalize_1",children:"Normalize(Vector)"})}),(0,n.jsx)("td",{children:"Normalizes the given vector."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Parse",children:"Parse(String)"})}),(0,n.jsxs)("td",{children:["Parses a ",(0,n.jsx)("a",{href:"T_Avalonia_Vector",children:"Vector"})," string."]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_Subtract",children:"Subtract(Vector, Vector)"})}),(0,n.jsx)("td",{children:"Subtracts the second from the first vector"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_ToString",children:"ToString()"})}),(0,n.jsxs)("td",{children:["Returns the string representation of the vector.",(0,n.jsx)("br",{}),"(Overrides ",(0,n.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype.tostring",target:"_blank",rel:"noopener noreferrer",children:"ValueType.ToString()"}),")"]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_WithX",children:"WithX(Double)"})}),(0,n.jsx)("td",{children:"Returns a new vector with the specified X component."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Vector_WithY",children:"WithY(Double)"})}),(0,n.jsx)("td",{children:"Returns a new vector with the specified Y component."})]})]}),"\n",(0,n.jsx)(r.h2,{id:"extension-methods",children:"Extension Methods"}),"\n",(0,n.jsx)("table",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("a",{href:"M_Avalonia_Skia_SkiaSharpExtensions_ToSKPoint_1",children:"ToSKPoint()"})}),(0,n.jsxs)("td",{children:[(0,n.jsx)("br",{}),"(Defined by ",(0,n.jsx)("a",{href:"T_Avalonia_Skia_SkiaSharpExtensions",children:"SkiaSharpExtensions"}),")"]})]})}),"\n",(0,n.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,n.jsx)(r.h4,{id:"reference",children:"Reference"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)("a",{href:"T_Avalonia_Vector",children:"Vector Structure"}),(0,n.jsx)(r.br,{}),"\n",(0,n.jsx)("a",{href:"N_Avalonia",children:"Avalonia Namespace"})]})]})}function h(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},250065:function(e,r,t){t.d(r,{Z:function(){return o},a:function(){return c}});var s=t(667294);let n={},i=s.createContext(n);function c(e){let r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);