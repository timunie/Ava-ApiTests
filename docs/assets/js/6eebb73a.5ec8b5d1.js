"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["676342"],{473118:function(e,t,r){r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});var n=r(622109),i=r(696773),s=r(116070);let l={},o="TryConvert Method",a={},c=[{value:"Definition",id:"definition",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function d(e){let t={br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components},{TabItem:r,Tabs:n}=t;return r||u("TabItem",!0),n||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"tryconvert-method",children:"TryConvert Method"})}),"\n",(0,i.jsx)(t.p,{children:"Try to convert a value to a type by any means possible."}),"\n",(0,i.jsx)(t.h2,{id:"definition",children:"Definition"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Namespace:"})," ",(0,i.jsx)("a",{href:"N_Avalonia_Utilities",children:"Avalonia.Utilities"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll)"]}),"\n",(0,i.jsxs)(n,{groupId:"api-code-preview",children:[(0,i.jsx)(r,{value:"csharp",label:"C#",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"public static bool TryConvert(\r\n	Type to,\r\n	Object? value,\r\n	CultureInfo? culture,\r\n	out Object?? result\r\n)\n"})})}),(0,i.jsx)(r,{value:"vb",label:"VB",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-vb",children:"Public Shared Function TryConvert ( \r\n	to As Type,\r\n	value As Object,\r\n	culture As CultureInfo,\r\n	<OutAttribute> ByRef result As Object\r\n) As Boolean\n"})})}),(0,i.jsx)(r,{value:"fsharp",label:"F#",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-fsharp",children:"static member TryConvert : \r\n        to : Type * \r\n        value : Object * \r\n        culture : CultureInfo * \r\n        result : Object byref -> bool \n"})})})]}),"\n",(0,i.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/Utilities/TypeUtilities.cs#L132",title:"View the source code",children:"View Source"}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dt",{children:["\xa0\xa0",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.type",target:"_blank",rel:"noopener noreferrer",children:"Type"})]}),(0,i.jsx)("dd",{children:"The type to convert to."}),(0,i.jsxs)("dt",{children:["\xa0\xa0",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.object",target:"_blank",rel:"noopener noreferrer",children:"Object"})]}),(0,i.jsx)("dd",{children:"The value to convert."}),(0,i.jsxs)("dt",{children:["\xa0\xa0",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo",target:"_blank",rel:"noopener noreferrer",children:"CultureInfo"})]}),(0,i.jsx)("dd",{children:"The culture to use."}),(0,i.jsxs)("dt",{children:["\xa0\xa0",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.object",target:"_blank",rel:"noopener noreferrer",children:"Object"})]}),(0,i.jsx)("dd",{children:"If successful, contains the convert value."})]}),"\n",(0,i.jsx)(t.h4,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.boolean",target:"_blank",rel:"noopener noreferrer",children:"Boolean"}),(0,i.jsx)(t.br,{}),"\n","True if the cast was successful, otherwise false."]}),"\n",(0,i.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsx)(t.h4,{id:"reference",children:"Reference"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)("a",{href:"T_Avalonia_Utilities_TypeUtilities",children:"TypeUtilities Class"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)("a",{href:"N_Avalonia_Utilities",children:"Avalonia.Utilities Namespace"})]})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function u(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},116070:function(e,t,r){r.d(t,{Z:()=>o,a:()=>l});var n=r(841699);let i={},s=n.createContext(i);function l(e){let t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(s.Provider,{value:t},e.children)}},622109:function(e){e.exports=JSON.parse('{"id":"M_Avalonia_Utilities_TypeUtilities_TryConvert","title":"TryConvert Method","description":"Try to convert a value to a type by any means possible.","source":"@site/docs/M_Avalonia_Utilities_TypeUtilities_TryConvert.md","sourceDirName":".","slug":"/M_Avalonia_Utilities_TypeUtilities_TryConvert","permalink":"/Ava-ApiTests/docs/M_Avalonia_Utilities_TypeUtilities_TryConvert","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/M_Avalonia_Utilities_TypeUtilities_TryConvert.md","tags":[],"version":"current","frontMatter":{}}')}}]);