"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["607406"],{707538:function(e,n,t){t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=t(34521),r=t(696773),o=t(116070);let s={},a="UpdateWithKeyedMutexAsync Method",d={},c=[{value:"Definition",id:"definition",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function l(e){let n={br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components},{TabItem:t,Tabs:i}=n;return t||h("TabItem",!0),i||h("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"updatewithkeyedmutexasync-method",children:"UpdateWithKeyedMutexAsync Method"})}),"\n",(0,r.jsx)(n.p,{children:"Updates the surface contents using an imported memory image using a keyed mutex as the means of synchronization"}),"\n",(0,r.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Namespace:"})," ",(0,r.jsx)("a",{href:"N_Avalonia_Rendering_Composition",children:"Avalonia.Rendering.Composition"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll)"]}),"\n",(0,r.jsxs)(i,{groupId:"api-code-preview",children:[(0,r.jsx)(t,{value:"csharp",label:"C#",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Task UpdateWithKeyedMutexAsync(\r\n	ICompositionImportedGpuImage image,\r\n	uint acquireIndex,\r\n	uint releaseIndex\r\n)\n"})})}),(0,r.jsx)(t,{value:"vb",label:"VB",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb",children:"Public Function UpdateWithKeyedMutexAsync ( \r\n	image As ICompositionImportedGpuImage,\r\n	acquireIndex As UInteger,\r\n	releaseIndex As UInteger\r\n) As Task\n"})})}),(0,r.jsx)(t,{value:"fsharp",label:"F#",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fsharp",children:"member UpdateWithKeyedMutexAsync : \r\n        image : ICompositionImportedGpuImage * \r\n        acquireIndex : uint32 * \r\n        releaseIndex : uint32 -> Task \n"})})})]}),"\n",(0,r.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/Rendering/Composition/CompositionDrawingSurface.cs#L24",title:"View the source code",children:"View Source"}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)("dl",{children:[(0,r.jsxs)("dt",{children:["\xa0\xa0",(0,r.jsx)("a",{href:"T_Avalonia_Rendering_Composition_ICompositionImportedGpuImage",children:"ICompositionImportedGpuImage"})]}),(0,r.jsx)("dd",{children:"GPU image with new surface contents"}),(0,r.jsxs)("dt",{children:["\xa0\xa0",(0,r.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.uint32",target:"_blank",rel:"noopener noreferrer",children:"UInt32"})]}),(0,r.jsx)("dd",{children:"The mutex key to wait for before accessing the image"}),(0,r.jsxs)("dt",{children:["\xa0\xa0",(0,r.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.uint32",target:"_blank",rel:"noopener noreferrer",children:"UInt32"})]}),(0,r.jsx)("dd",{children:"The mutex key to release for after accessing the image"})]}),"\n",(0,r.jsx)(n.h4,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task",target:"_blank",rel:"noopener noreferrer",children:"Task"}),(0,r.jsx)(n.br,{}),"\n","A task that completes when update operation is completed and user code is free to destroy or dispose the image"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsx)(n.h4,{id:"reference",children:"Reference"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("a",{href:"T_Avalonia_Rendering_Composition_CompositionDrawingSurface",children:"CompositionDrawingSurface Class"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("a",{href:"N_Avalonia_Rendering_Composition",children:"Avalonia.Rendering.Composition Namespace"})]})]})}function p(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}function h(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},116070:function(e,n,t){t.d(n,{Z:()=>a,a:()=>s});var i=t(841699);let r={},o=i.createContext(r);function s(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},34521:function(e){e.exports=JSON.parse('{"id":"M_Avalonia_Rendering_Composition_CompositionDrawingSurface_UpdateWithKeyedMutexAsync","title":"UpdateWithKeyedMutexAsync Method","description":"Updates the surface contents using an imported memory image using a keyed mutex as the means of synchronization","source":"@site/docs/M_Avalonia_Rendering_Composition_CompositionDrawingSurface_UpdateWithKeyedMutexAsync.md","sourceDirName":".","slug":"/M_Avalonia_Rendering_Composition_CompositionDrawingSurface_UpdateWithKeyedMutexAsync","permalink":"/Ava-ApiTests/docs/M_Avalonia_Rendering_Composition_CompositionDrawingSurface_UpdateWithKeyedMutexAsync","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/M_Avalonia_Rendering_Composition_CompositionDrawingSurface_UpdateWithKeyedMutexAsync.md","tags":[],"version":"current","frontMatter":{}}')}}]);