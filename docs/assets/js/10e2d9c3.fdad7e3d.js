"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["459854"],{282431:function(e,n,a){a.r(n),a.d(n,{default:()=>h,frontMatter:()=>i,metadata:()=>r,assets:()=>o,toc:()=>c,contentTitle:()=>l});var r=JSON.parse('{"id":"Overload_Avalonia_Skia_Helpers_DrawingContextHelper_RenderAsync","title":"RenderAsync Method","description":"Overload List","source":"@site/docs/Overload_Avalonia_Skia_Helpers_DrawingContextHelper_RenderAsync.md","sourceDirName":".","slug":"/Overload_Avalonia_Skia_Helpers_DrawingContextHelper_RenderAsync","permalink":"/Ava-ApiTests/docs/Overload_Avalonia_Skia_Helpers_DrawingContextHelper_RenderAsync","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/Overload_Avalonia_Skia_Helpers_DrawingContextHelper_RenderAsync.md","tags":[],"version":"current","frontMatter":{}}'),s=a("785893"),t=a("250065");let i={},l="RenderAsync Method",o={},c=[{value:"Overload List",id:"overload-list",level:2},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function d(e){let n={br:"br",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"renderasync-method",children:"RenderAsync Method"})}),"\n",(0,s.jsx)(n.h2,{id:"overload-list",children:"Overload List"}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"M_Avalonia_Skia_Helpers_DrawingContextHelper_RenderAsync_1",children:"RenderAsync(SKCanvas, Visual)"})}),(0,s.jsx)("td",{children:"Renders Avalonia visual into a SKCanvas instance. This is useful in scenarios where canvas is not controlled by application, but received from another non avalonia api like: SKCanvas canvas = SKDocument.BeginPage(...);"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"M_Avalonia_Skia_Helpers_DrawingContextHelper_RenderAsync",children:"RenderAsync(SKCanvas, Visual, Rect, Vector)"})}),(0,s.jsx)("td",{children:"Renders Avalonia visual into a SKCanvas instance. This is useful in scenarios where canvas is not controlled by application, but received from another non avalonia api like: SKCanvas canvas = SKDocument.BeginPage(...);"})]})]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsx)(n.h4,{id:"reference",children:"Reference"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("a",{href:"T_Avalonia_Skia_Helpers_DrawingContextHelper",children:"DrawingContextHelper Class"}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)("a",{href:"N_Avalonia_Skia_Helpers",children:"Avalonia.Skia.Helpers Namespace"})]})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,a){a.d(n,{Z:function(){return l},a:function(){return i}});var r=a(667294);let s={},t=r.createContext(s);function i(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);