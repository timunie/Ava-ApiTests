"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["969034"],{582157:function(e,n,s){s.r(n),s.d(n,{default:()=>d,frontMatter:()=>i,metadata:()=>t,assets:()=>l,toc:()=>c,contentTitle:()=>o});var t=JSON.parse('{"id":"M_Avalonia_Input_PhysicalKeyExtensions_ToQwertyKey","title":"ToQwertyKey Method","description":"Maps a physical key to a corresponding key, if possible, on a QWERTY keyboard.","source":"@site/docs/M_Avalonia_Input_PhysicalKeyExtensions_ToQwertyKey.md","sourceDirName":".","slug":"/M_Avalonia_Input_PhysicalKeyExtensions_ToQwertyKey","permalink":"/Ava-ApiTests/docs/M_Avalonia_Input_PhysicalKeyExtensions_ToQwertyKey","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/M_Avalonia_Input_PhysicalKeyExtensions_ToQwertyKey.md","tags":[],"version":"current","frontMatter":{}}'),r=s("696773"),a=s("116070");let i={},o="ToQwertyKey Method",l={},c=[{value:"Definition",id:"definition",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"Usage Note",id:"usage-note",level:4},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function h(e){let n={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components},{TabItem:s,Tabs:t}=n;return s||u("TabItem",!0),t||u("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"toqwertykey-method",children:"ToQwertyKey Method"})}),"\n",(0,r.jsx)(n.p,{children:"Maps a physical key to a corresponding key, if possible, on a QWERTY keyboard."}),"\n",(0,r.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Namespace:"})," ",(0,r.jsx)("a",{href:"N_Avalonia_Input",children:"Avalonia.Input"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll) Version: 11.2.0"]}),"\n",(0,r.jsxs)(t,{groupId:"api-code-preview",children:[(0,r.jsx)(s,{value:"csharp",label:"C#",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public static Key ToQwertyKey(\r\n	this PhysicalKey physicalKey\r\n)\n"})})}),(0,r.jsx)(s,{value:"vb",label:"VB",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb",children:"<ExtensionAttribute>\r\nPublic Shared Function ToQwertyKey ( \r\n	physicalKey As PhysicalKey\r\n) As Key\n"})})}),(0,r.jsx)(s,{value:"fsharp",label:"F#",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-fsharp",children:"[<ExtensionAttribute>]\r\nstatic member ToQwertyKey : \r\n        physicalKey : PhysicalKey -> Key \n"})})})]}),"\n",(0,r.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/Input/PhysicalKeyExtensions.cs#L14",title:"View the source code",children:"View Source"}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)("dl",{children:[(0,r.jsxs)("dt",{children:["\xa0\xa0",(0,r.jsx)("a",{href:"T_Avalonia_Input_PhysicalKey",children:"PhysicalKey"})]}),(0,r.jsx)("dd",{children:"the physical key to map."})]}),"\n",(0,r.jsx)(n.h4,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("a",{href:"T_Avalonia_Input_Key",children:"Key"}),(0,r.jsx)(n.br,{}),"\n","The key corresponding to ",(0,r.jsx)(n.em,{children:"physicalKey"}),", or ",(0,r.jsx)("a",{href:"T_Avalonia_Input_Key",children:"None"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"usage-note",children:"Usage Note"}),"\n",(0,r.jsxs)(n.p,{children:["In Visual Basic and C#, you can call this method as an instance method on any object of type ",(0,r.jsx)("a",{href:"T_Avalonia_Input_PhysicalKey",children:"PhysicalKey"}),". When you use instance method syntax to call this method, omit the first parameter. For more information, see ",(0,r.jsx)("a",{href:"https://docs.microsoft.com/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods",target:"_blank",rel:"noopener noreferrer",children:"Extension Methods (Visual Basic)"})," or ",(0,r.jsx)("a",{href:"https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods",target:"_blank",rel:"noopener noreferrer",children:"Extension Methods (C# Programming Guide)"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsx)(n.h4,{id:"reference",children:"Reference"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("a",{href:"T_Avalonia_Input_PhysicalKeyExtensions",children:"PhysicalKeyExtensions Class"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("a",{href:"N_Avalonia_Input",children:"Avalonia.Input Namespace"})]})]})}function d(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}function u(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},116070:function(e,n,s){s.d(n,{Z:function(){return o},a:function(){return i}});var t=s(841699);let r={},a=t.createContext(r);function i(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);