"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["198875"],{335572:function(e,t,n){n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var i=n(590852),r=n(696773),o=n(116070);let s={},a="Point Operators and Type Conversions",l={},d=[{value:"Operators",id:"operators",level:2},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function c(e){let t={br:"br",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"point-operators-and-type-conversions",children:"Point Operators and Type Conversions"})}),"\n",(0,r.jsx)(t.h2,{id:"operators",children:"Operators"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Addition",children:"Addition(Point, Point)"})}),(0,r.jsx)("td",{children:"Adds two points."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Addition_1",children:"Addition(Point, Vector)"})}),(0,r.jsx)("td",{children:"Adds a vector to a point."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Division",children:"Division(Point, Double)"})}),(0,r.jsx)("td",{children:"Divides a point by a factor coordinate-wise"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Equality",children:"Equality(Point, Point)"})}),(0,r.jsxs)("td",{children:["Checks for equality between two ",(0,r.jsx)("a",{href:"T_Avalonia_Point",children:"Point"}),"s."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Implicit",children:"Implicit(Point to Vector)"})}),(0,r.jsxs)("td",{children:["Converts the ",(0,r.jsx)("a",{href:"T_Avalonia_Point",children:"Point"})," to a ",(0,r.jsx)("a",{href:"T_Avalonia_Vector",children:"Vector"}),"."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Inequality",children:"Inequality(Point, Point)"})}),(0,r.jsxs)("td",{children:["Checks for inequality between two ",(0,r.jsx)("a",{href:"T_Avalonia_Point",children:"Point"}),"s."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Multiply_2",children:"Multiply(Double, Point)"})}),(0,r.jsx)("td",{children:"Multiplies a point by a factor coordinate-wise"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Multiply",children:"Multiply(Point, Matrix)"})}),(0,r.jsx)("td",{children:"Applies a matrix to a point."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Multiply_1",children:"Multiply(Point, Double)"})}),(0,r.jsx)("td",{children:"Multiplies a point by a factor coordinate-wise"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Subtraction",children:"Subtraction(Point, Point)"})}),(0,r.jsx)("td",{children:"Subtracts two points."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_Subtraction_1",children:"Subtraction(Point, Vector)"})}),(0,r.jsx)("td",{children:"Subtracts a vector from a point."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("a",{href:"M_Avalonia_Point_op_UnaryNegation",children:"UnaryNegation(Point)"})}),(0,r.jsx)("td",{children:"Negates a point."})]})]}),"\n",(0,r.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsx)(t.h4,{id:"reference",children:"Reference"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)("a",{href:"T_Avalonia_Point",children:"Point Structure"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)("a",{href:"N_Avalonia",children:"Avalonia Namespace"})]})]})}function h(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},116070:function(e,t,n){n.d(t,{Z:()=>a,a:()=>s});var i=n(841699);let r={},o=i.createContext(r);function s(e){let t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}},590852:function(e){e.exports=JSON.parse('{"id":"Operators_T_Avalonia_Point","title":"Point Operators and Type Conversions","description":"Operators","source":"@site/docs/Operators_T_Avalonia_Point.md","sourceDirName":".","slug":"/Operators_T_Avalonia_Point","permalink":"/Ava-ApiTests/docs/Operators_T_Avalonia_Point","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/Operators_T_Avalonia_Point.md","tags":[],"version":"current","frontMatter":{}}')}}]);