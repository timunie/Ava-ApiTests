"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["549010"],{965090:function(e,r,t){t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>c});var n=t(287030),a=t(696773),o=t(116070);let s={},i="GetInstance Method",l={},c=[{value:"Definition",id:"definition",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function d(e){let r={br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components},{TabItem:t,Tabs:n}=r;return t||h("TabItem",!0),n||h("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"getinstance-method",children:"GetInstance Method"})}),"\n",(0,a.jsx)(r.p,{children:"Gets the most appropriate KeyGestureFormatInfo for the IFormatProvider requested. This will be, in order: 1. The provided IFormatProvider as a KeyGestureFormatInfo 2. The currently registered platform specific KeyGestureFormatInfo, if present. 3. The Invariant otherwise."}),"\n",(0,a.jsx)(r.h2,{id:"definition",children:"Definition"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Namespace:"})," ",(0,a.jsx)("a",{href:"N_Avalonia_Input_Platform",children:"Avalonia.Input.Platform"}),(0,a.jsx)(r.br,{}),"\n",(0,a.jsx)(r.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll)"]}),"\n",(0,a.jsxs)(n,{groupId:"api-code-preview",children:[(0,a.jsx)(t,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:"public static KeyGestureFormatInfo GetInstance(\r\n	IFormatProvider? formatProvider\r\n)\n"})})}),(0,a.jsx)(t,{value:"vb",label:"VB",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vb",children:"Public Shared Function GetInstance ( \r\n	formatProvider As IFormatProvider\r\n) As KeyGestureFormatInfo\n"})})}),(0,a.jsx)(t,{value:"fsharp",label:"F#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-fsharp",children:"static member GetInstance : \r\n        formatProvider : IFormatProvider -> KeyGestureFormatInfo \n"})})})]}),"\n",(0,a.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/Input/Platform/KeyGestureFormatInfo.cs#L62",title:"View the source code",children:"View Source"}),"\n",(0,a.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)("dl",{children:[(0,a.jsxs)("dt",{children:["\xa0\xa0",(0,a.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.iformatprovider",target:"_blank",rel:"noopener noreferrer",children:"IFormatProvider"})]}),(0,a.jsx)("dd",{children:"The IFormatProvider to get a KeyGestureFormatInfo for."})]}),"\n",(0,a.jsx)(r.h4,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsx)("a",{href:"T_Avalonia_Input_Platform_KeyGestureFormatInfo",children:"KeyGestureFormatInfo"}),"\n",(0,a.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,a.jsx)(r.h4,{id:"reference",children:"Reference"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)("a",{href:"T_Avalonia_Input_Platform_KeyGestureFormatInfo",children:"KeyGestureFormatInfo Class"}),(0,a.jsx)(r.br,{}),"\n",(0,a.jsx)("a",{href:"N_Avalonia_Input_Platform",children:"Avalonia.Input.Platform Namespace"})]})]})}function u(e={}){let{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}function h(e,r){throw Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},116070:function(e,r,t){t.d(r,{Z:()=>i,a:()=>s});var n=t(841699);let a={},o=n.createContext(a);function s(e){let r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:r},e.children)}},287030:function(e){e.exports=JSON.parse('{"id":"M_Avalonia_Input_Platform_KeyGestureFormatInfo_GetInstance","title":"GetInstance Method","description":"Gets the most appropriate KeyGestureFormatInfo for the IFormatProvider requested. This will be, in order: 1. The provided IFormatProvider as a KeyGestureFormatInfo 2. The currently registered platform specific KeyGestureFormatInfo, if present. 3. The Invariant otherwise.","source":"@site/docs/M_Avalonia_Input_Platform_KeyGestureFormatInfo_GetInstance.md","sourceDirName":".","slug":"/M_Avalonia_Input_Platform_KeyGestureFormatInfo_GetInstance","permalink":"/Ava-ApiTests/docs/M_Avalonia_Input_Platform_KeyGestureFormatInfo_GetInstance","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/M_Avalonia_Input_Platform_KeyGestureFormatInfo_GetInstance.md","tags":[],"version":"current","frontMatter":{}}')}}]);