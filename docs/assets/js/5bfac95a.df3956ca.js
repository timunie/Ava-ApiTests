"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["215836"],{995071:function(e,o,t){t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>d});var n=t(742474),i=t(696773),r=t(116070);let s={},a="TryGetDefaultCompositor Method",l={},d=[{value:"Definition",id:"definition",level:2},{value:"Return Value",id:"return-value",level:4},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function c(e){let o={br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components},{TabItem:t,Tabs:n}=o;return t||u("TabItem",!0),n||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"trygetdefaultcompositor-method",children:"TryGetDefaultCompositor Method"})}),"\n",(0,i.jsx)(o.p,{children:"Attempts to get the Compositor instance that will be used by default for new TopLevels created by the current platform backend. This won't work for every single platform backend and backend settings, e. g. with web we'll need to have separate Compositor instances per output HTML canvas since they don't share OpenGL state. Another case where default compositor won't be available is our planned multithreaded rendering mode where each window would get its own Compositor instance This method is still useful for obtaining GPU device LUID to speed up initialization, but you should always check if default Compositor matches one used by our control once it gets attached to a TopLevel"}),"\n",(0,i.jsx)(o.h2,{id:"definition",children:"Definition"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.strong,{children:"Namespace:"})," ",(0,i.jsx)("a",{href:"N_Avalonia_Rendering_Composition",children:"Avalonia.Rendering.Composition"}),(0,i.jsx)(o.br,{}),"\n",(0,i.jsx)(o.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll) Version: 11.2.0"]}),"\n",(0,i.jsxs)(n,{groupId:"api-code-preview",children:[(0,i.jsx)(t,{value:"csharp",label:"C#",children:(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-csharp",children:"public static Compositor? TryGetDefaultCompositor()\n"})})}),(0,i.jsx)(t,{value:"vb",label:"VB",children:(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-vb",children:"Public Shared Function TryGetDefaultCompositor As Compositor\n"})})}),(0,i.jsx)(t,{value:"fsharp",label:"F#",children:(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-fsharp",children:"static member TryGetDefaultCompositor : unit -> Compositor \n"})})})]}),"\n",(0,i.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/Rendering/Composition/Compositor.cs#L332",title:"View the source code",children:"View Source"}),"\n",(0,i.jsx)(o.h4,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)("a",{href:"T_Avalonia_Rendering_Composition_Compositor",children:"Compositor"}),"\n",(0,i.jsx)(o.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsx)(o.h4,{id:"reference",children:"Reference"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)("a",{href:"T_Avalonia_Rendering_Composition_Compositor",children:"Compositor Class"}),(0,i.jsx)(o.br,{}),"\n",(0,i.jsx)("a",{href:"N_Avalonia_Rendering_Composition",children:"Avalonia.Rendering.Composition Namespace"})]})]})}function p(e={}){let{wrapper:o}={...(0,r.a)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function u(e,o){throw Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},116070:function(e,o,t){t.d(o,{Z:()=>a,a:()=>s});var n=t(841699);let i={},r=n.createContext(i);function s(e){let o=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:o},e.children)}},742474:function(e){e.exports=JSON.parse('{"id":"M_Avalonia_Rendering_Composition_Compositor_TryGetDefaultCompositor","title":"TryGetDefaultCompositor Method","description":"Attempts to get the Compositor instance that will be used by default for new TopLevels created by the current platform backend. This won\'t work for every single platform backend and backend settings, e. g. with web we\'ll need to have separate Compositor instances per output HTML canvas since they don\'t share OpenGL state. Another case where default compositor won\'t be available is our planned multithreaded rendering mode where each window would get its own Compositor instance This method is still useful for obtaining GPU device LUID to speed up initialization, but you should always check if default Compositor matches one used by our control once it gets attached to a TopLevel","source":"@site/docs/M_Avalonia_Rendering_Composition_Compositor_TryGetDefaultCompositor.md","sourceDirName":".","slug":"/M_Avalonia_Rendering_Composition_Compositor_TryGetDefaultCompositor","permalink":"/Ava-ApiTests/docs/M_Avalonia_Rendering_Composition_Compositor_TryGetDefaultCompositor","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/M_Avalonia_Rendering_Composition_Compositor_TryGetDefaultCompositor.md","tags":[],"version":"current","frontMatter":{}}')}}]);