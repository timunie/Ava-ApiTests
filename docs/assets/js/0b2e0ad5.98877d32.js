"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["167000"],{65767:function(e,t,r){r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>o});var n=r(844200),i=r(696773),l=r(116070);let a={},s="RelativeRect Structure",c={},o=[{value:"Definition",id:"definition",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Operators",id:"operators",level:2},{value:"Fields",id:"fields",level:2},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function d(e){let t={br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...e.components},{TabItem:r,Tabs:n}=t;return r||v("TabItem",!0),n||v("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"relativerect-structure",children:"RelativeRect Structure"})}),"\n",(0,i.jsx)(t.p,{children:"Defines a rectangle that may be defined relative to a containing element."}),"\n",(0,i.jsx)(t.h2,{id:"definition",children:"Definition"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Namespace:"})," ",(0,i.jsx)("a",{href:"N_Avalonia",children:"Avalonia"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll)"]}),"\n",(0,i.jsxs)(n,{groupId:"api-code-preview",children:[(0,i.jsx)(r,{value:"csharp",label:"C#",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"public readonly struct RelativeRect : IEquatable<RelativeRect>\n"})})}),(0,i.jsx)(r,{value:"vb",label:"VB",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-vb",children:"Public Structure RelativeRect\r\n	Implements IEquatable(Of RelativeRect)\n"})})}),(0,i.jsx)(r,{value:"fsharp",label:"F#",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-fsharp",children:"[<SealedAttribute>]\r\ntype RelativeRect = \r\n    struct\r\n        inherit ValueType\r\n        interface IEquatable<RelativeRect>\r\n    end\n"})})})]}),"\n",(0,i.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/RelativeRect.cs",title:"View the source code",children:"View Source"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Inheritance"})}),(0,i.jsxs)("td",{children:[(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.object",target:"_blank",rel:"noopener noreferrer",children:"Object"}),"  →  ",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype",target:"_blank",rel:"noopener noreferrer",children:"ValueType"}),"  →  RelativeRect"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Implements"})}),(0,i.jsxs)("td",{children:[(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.iequatable-1",target:"_blank",rel:"noopener noreferrer",children:"IEquatable"}),"(RelativeRect)"]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect__ctor_2",children:"RelativeRect(Rect, RelativeUnit)"})}),(0,i.jsx)("td",{children:"Initializes a new instance of the RelativeRect structure."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect__ctor_3",children:"RelativeRect(Size, RelativeUnit)"})}),(0,i.jsx)("td",{children:"Initializes a new instance of the RelativeRect structure."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect__ctor",children:"RelativeRect(Point, Point, RelativeUnit)"})}),(0,i.jsx)("td",{children:"Initializes a new instance of the RelativeRect structure."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect__ctor_1",children:"RelativeRect(Point, Size, RelativeUnit)"})}),(0,i.jsx)("td",{children:"Initializes a new instance of the RelativeRect structure."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect__ctor_4",children:"RelativeRect(Double, Double, Double, Double, RelativeUnit)"})}),(0,i.jsx)("td",{children:"Initializes a new instance of the RelativeRect structure."})]})]}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"P_Avalonia_RelativeRect_Rect",children:"Rect"})}),(0,i.jsx)("td",{children:"Gets the rectangle."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"P_Avalonia_RelativeRect_Unit",children:"Unit"})}),(0,i.jsx)("td",{children:"Gets the unit of the rectangle."})]})]}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_Equals_1",children:"Equals(Object)"})}),(0,i.jsxs)("td",{children:["Checks if the RelativeRect equals another object.",(0,i.jsx)("br",{}),"(Overrides ",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype.equals",target:"_blank",rel:"noopener noreferrer",children:"ValueType.Equals(Object)"}),")"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_Equals",children:"Equals(RelativeRect)"})}),(0,i.jsx)("td",{children:"Checks if the RelativeRect equals another rectangle."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_GetHashCode",children:"GetHashCode()"})}),(0,i.jsxs)("td",{children:["Gets a hashcode for a RelativeRect.",(0,i.jsx)("br",{}),"(Overrides ",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode",target:"_blank",rel:"noopener noreferrer",children:"ValueType.GetHashCode()"}),")"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.object.gettype",target:"_blank",rel:"noopener noreferrer",children:"GetType()"})}),(0,i.jsxs)("td",{children:["Gets the ",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.type",target:"_blank",rel:"noopener noreferrer",children:"Type"})," of the current instance.",(0,i.jsx)("br",{}),"(Inherited from ",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.object",target:"_blank",rel:"noopener noreferrer",children:"Object"}),")"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_Parse",children:"Parse(String)"})}),(0,i.jsx)("td",{children:"Parses a RelativeRect string."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_ToPixels",children:"ToPixels(Rect)"})}),(0,i.jsx)("td",{children:"Converts a RelativeRect into pixels."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_ToPixels_1",children:"ToPixels(Size)"})}),(0,i.jsx)("td",{children:"Converts a RelativeRect into pixels."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype.tostring",target:"_blank",rel:"noopener noreferrer",children:"ToString()"})}),(0,i.jsxs)("td",{children:["Returns the fully qualified type name of this instance.",(0,i.jsx)("br",{}),"(Inherited from ",(0,i.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.valuetype",target:"_blank",rel:"noopener noreferrer",children:"ValueType"}),")"]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"operators",children:"Operators"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_op_Equality",children:"Equality(RelativeRect, RelativeRect)"})}),(0,i.jsx)("td",{children:"Checks for equality between two RelativeRects."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"M_Avalonia_RelativeRect_op_Inequality",children:"Inequality(RelativeRect, RelativeRect)"})}),(0,i.jsx)("td",{children:"Checks for inequality between two RelativeRects."})]})]}),"\n",(0,i.jsx)(t.h2,{id:"fields",children:"Fields"}),"\n",(0,i.jsx)("table",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"F_Avalonia_RelativeRect_Fill",children:"Fill"})}),(0,i.jsx)("td",{children:"A rectangle that represents 100% of an area."})]})}),"\n",(0,i.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsx)(t.h4,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)("a",{href:"N_Avalonia",children:"Avalonia Namespace"})]})}function h(e={}){let{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function v(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},116070:function(e,t,r){r.d(t,{Z:()=>s,a:()=>a});var n=r(841699);let i={},l=n.createContext(i);function a(e){let t=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(l.Provider,{value:t},e.children)}},844200:function(e){e.exports=JSON.parse('{"id":"T_Avalonia_RelativeRect","title":"RelativeRect Structure","description":"Defines a rectangle that may be defined relative to a containing element.","source":"@site/docs/T_Avalonia_RelativeRect.md","sourceDirName":".","slug":"/T_Avalonia_RelativeRect","permalink":"/Ava-ApiTests/docs/T_Avalonia_RelativeRect","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/T_Avalonia_RelativeRect.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"RelativePoint Structure","permalink":"/Ava-ApiTests/docs/T_Avalonia_RelativePoint"},"next":{"title":"RelativeScalar Structure","permalink":"/Ava-ApiTests/docs/T_Avalonia_RelativeScalar"}}')}}]);