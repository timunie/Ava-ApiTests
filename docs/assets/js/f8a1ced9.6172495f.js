"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["794167"],{966122:function(e,r,t){t.r(r),t.d(r,{default:()=>h,frontMatter:()=>s,metadata:()=>n,assets:()=>a,toc:()=>m,contentTitle:()=>i});var n=JSON.parse('{"id":"T_Avalonia_Platform_ITransformedGeometryImpl","title":"ITransformedGeometryImpl Interface","description":"Represents a geometry with a transform applied.","source":"@site/docs/T_Avalonia_Platform_ITransformedGeometryImpl.md","sourceDirName":".","slug":"/T_Avalonia_Platform_ITransformedGeometryImpl","permalink":"/Ava-ApiTests/docs/T_Avalonia_Platform_ITransformedGeometryImpl","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/T_Avalonia_Platform_ITransformedGeometryImpl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"ITopLevelImpl Interface","permalink":"/Ava-ApiTests/docs/T_Avalonia_Platform_ITopLevelImpl"},"next":{"title":"ITrayIconImpl Interface","permalink":"/Ava-ApiTests/docs/T_Avalonia_Platform_ITrayIconImpl"}}'),o=t("785893"),l=t("250065");let s={},i="ITransformedGeometryImpl Interface",a={},m=[{value:"Definition",id:"definition",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function d(e){let r={br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...e.components},{TabItem:t,Tabs:n}=r;return t||c("TabItem",!0),n||c("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"itransformedgeometryimpl-interface",children:"ITransformedGeometryImpl Interface"})}),"\n",(0,o.jsx)(r.p,{children:"Represents a geometry with a transform applied."}),"\n",(0,o.jsx)(r.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Namespace:"})," ",(0,o.jsx)("a",{href:"N_Avalonia_Platform",children:"Avalonia.Platform"}),(0,o.jsx)(r.br,{}),"\n",(0,o.jsx)(r.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll) Version: 11.2.0"]}),"\n",(0,o.jsxs)(n,{groupId:"api-code-preview",children:[(0,o.jsx)(t,{value:"csharp",label:"C#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:"public interface ITransformedGeometryImpl : IGeometryImpl\n"})})}),(0,o.jsx)(t,{value:"vb",label:"VB",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vb",children:"Public Interface ITransformedGeometryImpl\r\n	Inherits IGeometryImpl\n"})})}),(0,o.jsx)(t,{value:"fsharp",label:"F#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-fsharp",children:"type ITransformedGeometryImpl = \r\n    interface\r\n        interface IGeometryImpl\r\n    end\n"})})})]}),"\n",(0,o.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/Platform/ITransformedGeometryImpl.cs",title:"View the source code",children:"View Source"}),"\n",(0,o.jsx)("table",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("strong",{children:"Implements"})}),(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"})})]})}),"\n",(0,o.jsx)(r.p,{children:"An ITransformedGeometryImpl transforms a geometry without transforming its stroke thickness."}),"\n",(0,o.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"P_Avalonia_Platform_IGeometryImpl_Bounds",children:"Bounds"})}),(0,o.jsxs)("td",{children:["Gets the geometry's bounding rectangle.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"P_Avalonia_Platform_IGeometryImpl_ContourLength",children:"ContourLength"})}),(0,o.jsxs)("td",{children:["Gets the geometry's total length as if all its contours are placed in a straight line.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"P_Avalonia_Platform_ITransformedGeometryImpl_SourceGeometry",children:"SourceGeometry"})}),(0,o.jsxs)("td",{children:["Gets the source geometry that the ",(0,o.jsx)("a",{href:"P_Avalonia_Platform_ITransformedGeometryImpl_Transform",children:"Transform"})," is applied to."]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"P_Avalonia_Platform_ITransformedGeometryImpl_Transform",children:"Transform"})}),(0,o.jsx)("td",{children:"Gets the applied transform."})]})]}),"\n",(0,o.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_FillContains",children:"FillContains(Point)"})}),(0,o.jsxs)("td",{children:["Indicates whether the geometry's fill contains the specified point.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_GetRenderBounds",children:"GetRenderBounds(IPen)"})}),(0,o.jsxs)("td",{children:["Gets the geometry's bounding rectangle with the specified pen.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_GetWidenedGeometry",children:"GetWidenedGeometry(IPen)"})}),(0,o.jsxs)("td",{children:["Gets a geometry that is the shape defined by the stroke on the geometry produced by the specified Pen.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_Intersect",children:"Intersect(IGeometryImpl)"})}),(0,o.jsxs)("td",{children:["Intersects the geometry with another geometry.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_StrokeContains",children:"StrokeContains(IPen, Point)"})}),(0,o.jsxs)("td",{children:["Indicates whether the geometry's stroke contains the specified point.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_TryGetPointAndTangentAtDistance",children:"TryGetPointAndTangentAtDistance(Double, Point, Point)"})}),(0,o.jsxs)("td",{children:["Attempts to get the corresponding point and tangent from the specified distance along the contour of the geometry.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_TryGetPointAtDistance",children:"TryGetPointAtDistance(Double, Point)"})}),(0,o.jsxs)("td",{children:["Attempts to get the corresponding point at the specified distance",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_TryGetSegment",children:"TryGetSegment(Double, Double, Boolean, IGeometryImpl)"})}),(0,o.jsxs)("td",{children:["Attempts to get the corresponding path segment given by the two distances specified. Imagine it like snipping a part of the current geometry.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("a",{href:"M_Avalonia_Platform_IGeometryImpl_WithTransform",children:"WithTransform(Matrix)"})}),(0,o.jsxs)("td",{children:["Makes a clone of the geometry with the specified transform.",(0,o.jsx)("br",{}),"(Inherited from ",(0,o.jsx)("a",{href:"T_Avalonia_Platform_IGeometryImpl",children:"IGeometryImpl"}),")"]})]})]}),"\n",(0,o.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,o.jsx)(r.h4,{id:"reference",children:"Reference"}),"\n",(0,o.jsx)("a",{href:"N_Avalonia_Platform",children:"Avalonia.Platform Namespace"})]})}function h(e={}){let{wrapper:r}={...(0,l.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function c(e,r){throw Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},250065:function(e,r,t){t.d(r,{Z:function(){return i},a:function(){return s}});var n=t(667294);let o={},l=n.createContext(o);function s(e){let r=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);