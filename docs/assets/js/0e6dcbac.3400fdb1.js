"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["328668"],{435312:function(e,t,n){n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var r=n(676654),a=n(696773),i=n(116070);let l={},s="Inequality Operator",o={},c=[{value:"Definition",id:"definition",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"See Also",id:"see-also",level:2},{value:"Reference",id:"reference",level:4}];function d(e){let t={br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{TabItem:n,Tabs:r}=t;return n||u("TabItem",!0),r||u("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"inequality-operator",children:"Inequality Operator"})}),"\n",(0,a.jsxs)(t.p,{children:["Checks for inequality between two ",(0,a.jsx)("a",{href:"T_Avalonia_RelativeRect",children:"RelativeRect"}),"s."]}),"\n",(0,a.jsx)(t.h2,{id:"definition",children:"Definition"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Namespace:"})," ",(0,a.jsx)("a",{href:"N_Avalonia",children:"Avalonia"}),(0,a.jsx)(t.br,{}),"\n",(0,a.jsx)(t.strong,{children:"Assembly:"})," Avalonia.Base (in Avalonia.Base.dll) Version: 11.2.0"]}),"\n",(0,a.jsxs)(r,{groupId:"api-code-preview",children:[(0,a.jsx)(n,{value:"csharp",label:"C#",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"public static bool operator !=(\r\n	RelativeRect left,\r\n	RelativeRect right\r\n)\n"})})}),(0,a.jsx)(n,{value:"vb",label:"VB",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-vb",children:"Public Shared Operator <> ( \r\n	left As RelativeRect,\r\n	right As RelativeRect\r\n) As Boolean\n"})})}),(0,a.jsx)(n,{value:"fsharp",label:"F#",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-fsharp",children:"static let inline (<>)\r\n        left : RelativeRect * \r\n        right : RelativeRect  : bool\n"})})})]}),"\n",(0,a.jsx)("a",{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Base/RelativeRect.cs#L108",title:"View the source code",children:"View Source"}),"\n",(0,a.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)("dl",{children:[(0,a.jsxs)("dt",{children:["\xa0\xa0",(0,a.jsx)("a",{href:"T_Avalonia_RelativeRect",children:"RelativeRect"})]}),(0,a.jsx)("dd",{children:"The first rectangle."}),(0,a.jsxs)("dt",{children:["\xa0\xa0",(0,a.jsx)("a",{href:"T_Avalonia_RelativeRect",children:"RelativeRect"})]}),(0,a.jsx)("dd",{children:"The second rectangle."})]}),"\n",(0,a.jsx)(t.h4,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)("a",{href:"https://learn.microsoft.com/dotnet/api/system.boolean",target:"_blank",rel:"noopener noreferrer",children:"Boolean"}),(0,a.jsx)(t.br,{}),"\n","True if the rectangles are unequal; otherwise false."]}),"\n",(0,a.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,a.jsx)(t.h4,{id:"reference",children:"Reference"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)("a",{href:"T_Avalonia_RelativeRect",children:"RelativeRect Structure"}),(0,a.jsx)(t.br,{}),"\n",(0,a.jsx)("a",{href:"N_Avalonia",children:"Avalonia Namespace"})]})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}function u(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},116070:function(e,t,n){n.d(t,{Z:()=>s,a:()=>l});var r=n(841699);let a={},i=r.createContext(a);function l(e){let t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:t},e.children)}},676654:function(e){e.exports=JSON.parse('{"id":"M_Avalonia_RelativeRect_op_Inequality","title":"Inequality Operator","description":"Checks for inequality between two RelativeRects.","source":"@site/docs/M_Avalonia_RelativeRect_op_Inequality.md","sourceDirName":".","slug":"/M_Avalonia_RelativeRect_op_Inequality","permalink":"/Ava-ApiTests/docs/M_Avalonia_RelativeRect_op_Inequality","draft":false,"unlisted":false,"editUrl":"https://github.com/timunie/Ava-ApiTests/docs/M_Avalonia_RelativeRect_op_Inequality.md","tags":[],"version":"current","frontMatter":{}}')}}]);